diff --git a/comp3500/project2/src b/comp3500/project2/src
index 7b8f5b8..2b326a3 160000
--- a/comp3500/project2/src
+++ b/comp3500/project2/src
@@ -1 +1 @@
-Subproject commit 7b8f5b8edf48d6e571771da1b6c646f1334108f1
+Subproject commit 2b326a3d57a71719d9feb8b5245e29312b5acffe
diff --git a/comp3500/project4/exercises.txt b/comp3500/project4/exercises.txt
new file mode 100644
index 0000000..0be3bf5
--- /dev/null
+++ b/comp3500/project4/exercises.txt
@@ -0,0 +1,7 @@
+1. Explain how to avoid starvation in your implementation.
+
+	The program avoids starvation by prompting the other animal type to enter the kitchen before it lets other members of the last animal type in. For example, if two cats just finished in the kitchen, the program then sees if any mice are waiting to get in. If there are, you let them in. If not, then you can let other waiting cats or, if there aren't any other cats waiting, just open the kitchen.
+
+2. Comment on your experience of implementing the Cats_and_Mice program. Can you derive any principles about the use of the semaphore synchronization primitives?
+
+	I basically just followed exactly whay Dr. Qin provided us in handouts and in powerpoints. I understand sempahore's a lot more than I do locks and I understand them better now that I've seen an simplified example of how to use them.  
